<?php

/**
 * @file
 * Tests for feeds_tamper.module.
 */

/**
 * Base class for Feeds Tamper tests.
 */
class FeedsTamperWebTestHelper extends FeedsWebTestCase {

  public function setUp() {
    $args = func_get_args();
    $modules = array();
    $perms = array();
    if (isset($args[0]) && is_array($args[0])) {
      $modules = $args[0];
    }
    if (isset($args[1]) && is_array($args[1])) {
      $perms = $args[1];
    }
    $modules[] = 'feeds_tamper';
    parent::setUp($modules, $perms);
    // Set the front page to show 30 nodes so we can easily see what is aggregated.
    $edit = array('default_nodes_main' => 30);
    $this->drupalPost('admin/config/system/site-information', $edit, 'Save configuration');
    // Create user that can administer feeds but not tamer.
    $this->auth_user = $this->drupalCreateUser(array('administer feeds'));
  }

  function addTamperPlugin($importer_id, $source, $plugin_id, $settings = array(), $description = '', $id = NULL) {
    $plugin_info = feeds_tamper_get_plugin($plugin_id);
    if ($plugin_info['validate']) {
      $plugin_info['validate']($settings);
    }
    $plugin = feeds_tamper_new_instance();
    if (!empty($settings)) {
      $plugin->settings = $settings;
    }
    $plugin->importer = $importer_id;
    $plugin->source = $source;
    $plugin->plugin_id = $plugin_id;
    if (!isset($description)) {
      $description = $this->randomString(255);
    }
    if (!isset($id)) {
      $id = $this->randomName();
    }
    $plugin->id = $id;
    $plugin->description = $description;
    $this->assertEqual(SAVED_NEW, feeds_tamper_save_instance($plugin));
    $plugin = feeds_tamper_load_instance($id);
    // test that default weight is added.
    $this->assertTrue(($plugin->weight >= 0));
    $this->assertEqual($plugin->description, $description);
    return $id;
  }

  function disableTamperPlugin($id) {
    $plugin = feeds_tamper_load_instance($id);
    $plugin->disabled = TRUE;
    $this->assertEqual(SAVED_UPDATED, feeds_tamper_save_instance($plugin));
    // reload and test that changes were kept.
    $plugin = feeds_tamper_load_instance($id);
    $this->assertIdentical(TRUE, $plugin->disabled);
  }

  function setTamperPluginWeight($importer_id, $source, $id, $weight) {
  }

  function deleteTamperPlugin($id) {
    feeds_tamper_delete_instance($id);
    //$source = db_query("SELECT * FROM {feeds_source} WHERE feed_nid = :nid", array(':nid' => $nid))->fetchObject();
  }

  function assertUppercaseDevseedFeedContent() {
    $this->drupalGet('node');
    $this->assertText('SCALING THE OPEN ATRIUM UI');
    $this->assertText("PERU&#039;S SOFTWARE FREEDOM DAY: IMPRESSIONS &amp; PHOTOS");
    $this->assertText('WEEK IN DC TECH: SEPTEMBER 21 EDITION');
    $this->assertText('INTEGRATING THE SITEMINDER ACCESS SYSTEM IN AN OPEN ATRIUM-BASED INTRANET');
    $this->assertText('OPEN DATA FOR MICROFINANCE: THE NEW MIXMARKET.ORG');
    $this->assertText('WEEK IN DC TECH: SEPTEMBER 28TH EDITION');
    $this->assertText('SEPTEMBER GEODC MEETUP TONIGHT');
    $this->assertText('MAPPING INNOVATION AT THE WORLD BANK WITH OPEN ATRIUM');
    $this->assertText('WEEK IN DC TECH: OCTOBER 5TH EDITION');
    $this->assertText('OPEN ATRIUM TRANSLATION WORKFLOW: TWO WAY TRANSLATION UPDATES');
  }
  function assertDevseedFeedContent() {
    $this->drupalGet('node');
    $this->asserttext('Scaling the Open Atrium UI');
    $this->asserttext("Peru&#039;s Software Freedom Day: Impressions &amp; Photos");
    $this->asserttext('Week in DC Tech: September 21 Edition');
    $this->asserttext('Integrating the Siteminder Access System in an Open Atrium-based Intranet');
    $this->asserttext('Open Data for Microfinance: The New MIXMarket.org');
    $this->asserttext('Week in DC Tech: September 28th Edition');
    $this->asserttext('September GeoDC Meetup Tonight');
    $this->asserttext('Mapping Innovation at the World Bank with Open Atrium');
    $this->asserttext('Week in DC Tech: October 5th Edition');
    $this->asserttext('Open Atrium Translation Workflow: Two Way Translation Updates');
  }
}

/**
 * Simple tests for api functionality.
 */
class FeedsTamperWebTestCase extends FeedsTamperWebTestHelper {

  public static function getInfo() {
    return array(
      'name' => 'Feeds Tamper',
      'description' => 'Regression tests for Feeds Tamper.',
      'group' => 'Feeds Tamper',
    );
  }

  public function testBasic() {
    $this->createImporterConfiguration();
    $this->addMappings('syndication',
      array(
        array(
          'source' => 'title',
          'target' => 'title',
          'unique' => FALSE,
        ),
        array(
          'source' => 'guid',
          'target' => 'guid',
          'unique' => TRUE,
        ),
        array(
          'source' => 'description',
          'target' => 'body',
          'unique' => FALSE,
        ),
      )
    );
    // Set update existing.
    $this->setSettings('syndication', 'FeedsNodeProcessor', array('update_existing' => 1));

    // Test basic plugin adding.
    $settings = array(
      'mode' => 0,
    );
    $id = $this->addTamperPlugin('syndication', 'title', 'convert_case', $settings);
    // Create feed node, running import automatically.
    $nid = $this->createFeedNode();
    // Assert that all titles were uppercased.
    $this->assertUppercaseDevseedFeedContent();
    // Disable plugin.
    $this->disableTamperPlugin($id);
    //$this->deleteTamperPlugin($id);
    $this->drupalPost('node/' . $nid . '/import', array(), 'Import');
    $this->assertText('Updated 10 nodes.');
    $this->assertDevseedFeedContent();
  }
}
